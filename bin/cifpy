#!/usr/bin/env python
# encoding: utf-8
'''
cif.sdk.cifpy -- example python client for the python CIF SDK

cif.sdk.cifpy is a description

It defines classes_and_methods

@author:     github.com/wesyoung
        
@copyright:  2014 CSIRT Gadgets Foundation. All rights reserved.
        
@license:    Apache 2.0

@contact:    github.com/wesyoung
@deffield    updated: Updated

@organization: CSIRT Gadgets Foundation
'''

import sys
import os
from cif.sdk.client import Client
from prettytable import PrettyTable
import ConfigParser
import logging
import traceback
import pprint
pp = pprint.PrettyPrinter()

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter

__all__ = []
__version__ = cif.sdk.__version__
__date__ = '2014-05-19'
__updated__ = '2014-05-19'

class CLIError(Exception):
    '''Generic exception to raise and log different fatal errors.'''
    def __init__(self, msg):
        super(CLIError).__init__(type(self))
        self.msg = "E: %s" % msg
    def __str__(self):
        return self.msg
    def __unicode__(self):
        return self.msg

def make_table(r):
    ##TODO factory this out with snort rule, etc
    cols = ['id','provider','tlp','group','observable','confidence',
            'firsttime','lasttime','reporttime','altid','altid_tlp',
            'tags']
    
    t = PrettyTable(cols)
    t.align['provider'] = 'l'
    if type(r) is not list:
        r = [r]
    
    for obs in r:
        r = []
        for c in cols:
            y = obs.get(c)
            if type(y) is list:
                y = ','.join(y)
            r.append(y)
        t.add_row(r)
    print t
    ## END
    
def main(argv=None): # IGNORE:C0111
    '''Command line options.'''
    
    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s %s (%s)' % (program_version, program_build_date)
    program_shortdesc = __import__('__main__').__doc__.split("\n")[1]
    program_license = '''%s

  Created by github.com/wesyoung on %s.
  Copyright 2014 organization_name. All rights reserved.
  
  Licensed under the Apache License 2.0
  http://www.apache.org/licenses/LICENSE-2.0
  
  Distributed on an "AS IS" basis without warranties
  or conditions of any kind, either express or implied.

USAGE
''' % (program_shortdesc, str(__date__))

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license, formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %(default)s]")
        parser.add_argument("-q", "--query", dest="query", help="query for observable")
        parser.add_argument('-T', '--token', dest='token', help="specify token")
        parser.add_argument('-c', '--confidence', dest="confidence", help="specify confidence", metavar="CONFIDENCE")
        parser.add_argument('-l', '--limit', dest="limit", help="result limit", default=500, metavar="LIMIT")
        parser.add_argument('-Z', '--no-verify-ssl', dest="noverifyssl", action="store_true")
        parser.add_argument('-H', '--host', dest="host", help="url of host", metavar="HOST")
        parser.add_argument('-P', '--port', dest="port", help="port [default: %(default)s]", default="443")
        parser.add_argument('-t', '--timeout', dest="timeout", help='connection timeout [default: %(default)s]', default="300")
        parser.add_argument('-C', '--config', dest="config", help="configuration file [default: %(default)s]", default=os.path.expanduser("~/.cif") )
        parser.add_argument('-p', '--ping', dest="ping", action="store_true", help="ping")
        parser.add_argument('--submit', help="submit json string")
        parser.add_argument('-V', '--version', action='version', version=program_version_message)
    
        # Process arguments
        args = parser.parse_args()
        
        # setup the initial console logging
        fmt = '%(asctime)s - %(levelname)s - %(name)s::%(threadName)s - %(message)s'
        loglevel = logging.WARNING
        if args.verbose:
            loglevel = logging.DEBUG
        
        console = logging.StreamHandler()
        logging.getLogger('').setLevel(loglevel)
        console.setFormatter(logging.Formatter(fmt))
        logging.getLogger('').addHandler(console)
        logger = logging.getLogger(__name__)

        options = vars(args)
        
        c = ConfigParser.ConfigParser()
        if c.read([args.config]):
            if not c.has_section('client'):
                raise Exception("Unable to read " + args.config + " config file")
            v = dict(c.items("client"))
            for k in v:
                if not options.get(k):
                    options[k] = v[k]
        
        if(options.get('query')):
            ret = Client(**options).search(**options)
            make_table(ret)
        elif(options.get('ping')):
            ret = Client(**options).ping(**options)
        elif(options.get('submit')):
            ret = Client(**options).submit(**options)
            make_table(ret)
        else:
            logger.warning('operation not supported')
            sys.exit()

    except KeyboardInterrupt:
        ### handle keyboard interrupt ###
        return 0
    except Exception, e:
        traceback.print_exc(file=sys.stdout)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2

if __name__ == "__main__":
    sys.exit(main())